---
- name: Deploy Inference LLM Models
  hosts: kube_control_plane
  vars:
    ansible_python_interpreter: /usr/bin/python3
    helm_charts_base: "{{ lookup('env', 'PWD') }}/helm-charts"    
    remote_home_dir: "{{ lookup('env', 'PWD') }}/scripts"
    remote_helm_charts_base: "/tmp/helm-charts"
    ingress_file: "all_models_apisix_ingres_nginx.yaml"
    keycloak_url: "https://{{ secret_name }}"    
    uninstall_true: 'false'
    install_true: 'false'
    list_model_true: 'false'
    model_name_list: 'false'
    gpu_playbook: 'false'
    cpu_playbook: 'false'
    apisix_enabled: 'false'
    ingress_enabled: 'false'
    deploy_keycloak: 'no'
    tensor_parallel_size_vllm: 1
    gaudi_deployment: 'true'
    gaudi_values_file: "{{ remote_helm_charts_base }}/vllm/gaudi-values.yaml"        
  gather_facts: false
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env | default({}) }}"
  tasks:
    - name: Ensure pip is installed
      ansible.builtin.package:
        name: python3-pip
        state: present
      become: true
    - name: Install kubernetes library using pip
      ansible.builtin.pip:
        name: kubernetes
        state: present
        executable: /usr/bin/pip3
      become: true    
    - name: Create Kubernetes Secret for Hugging Face Token
      kubernetes.core.k8s:
        name: hugging-face-token
        namespace: default        
        kind: Secret
        definition:
          stringData:
            hugging-face-token: "{{ hugging_face_token }}"
        apply: yes
        state: present
      when: hugging_face_token is defined
    
    - name: Copy Helm chart files to node
      ansible.builtin.copy:
        src: "{{ helm_charts_base }}/"
        dest: "{{ remote_helm_charts_base }}/"
        mode: '0755'
        owner: ubuntu
        group: ubuntu
        remote_src: no
    
    - name: Copy Helm chart keycloak-realcreation file to node
      ansible.builtin.copy:
        src: "{{ remote_home_dir }}/"
        dest: "{{ remote_helm_charts_base }}/"
        mode: '0755'
        owner: ubuntu
        group: ubuntu
        remote_src: no
    
    - name: Ensure the script is executable
      file:
        path: "{{ remote_helm_charts_base }}/keycloak-realmcreation.sh"
        mode: '0755'
        owner: ubuntu
        group: ubuntu
    
    - name: Print model_name_list
      debug:
        var: model_name_list

    - name: Update Helm dependencies for auth-apisix on nodes
      ansible.builtin.command: helm dependency update "{{ remote_helm_charts_base }}/apisix-helm/"
      register: helm_dependency_update
      failed_when: helm_dependency_update.rc != 0
      when: apisix_enabled == "yes"
        
    
    - name: Fetch the keycloak client secret
      block:
        - name: Fetch the keycloak client secret
          command: "{{ remote_helm_charts_base }}/keycloak-realmcreation.sh {{ secret_name }} {{ keycloak_admin_user }} {{ keycloak_admin_password }} {{ keycloak_client_id }}"
          register: script_output
        - name: Set client_secret fact
          set_fact:
            client_secret: "{{ script_output.stdout | regex_search('Client secret: (.*)') | join('') | regex_replace('^Client secret: ') }}"
          when: script_output.stdout is search('Client secret:')
        - debug:
            msg: "The client secret is: {{ client_secret }}"
        - name: Print the script output
          debug:
            msg: "{{ script_output.stdout }}"
      when: deploy_keycloak == 'yes'
    
    - name: Deploy Llama8b LLM Model
      block:
        - name: Delete Ingress resource Llama8b from default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-llama-8b-ingress
            state: absent          
        - name: Delete Ingress resource Llama8b from auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-llama-8b-ingress
            state: absent          
        - name: Deploy LLM model Llama8b
          ansible.builtin.command: >-
            helm upgrade --install vllm-llama-8b "{{ remote_helm_charts_base }}/vllm"
            --set LLM_MODEL_ID="meta-llama/Meta-Llama-3.1-8B-Instruct"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}                        
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if gaudi_deployment %}
              --set tensor_parallel_size={{ tensor_parallel_size_vllm }}
              --values {{ gaudi_values_file }}              
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}
            --force   
          register: helm_upgrade_install_model_deployment
          failed_when: helm_upgrade_install_model_deployment.rc != 0
      when:                
        - "'llama-8b' in model_name_list"
        - install_true == 'true'


    - name: Check if vllm-llama-8b Helm release is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-llama-8b --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall vllm-llama-8b Helm release
      ansible.builtin.command:
        cmd: "helm uninstall vllm-llama-8b"
      when:
        - "'llama-8b' in model_name_list"
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""
    


    - name: Deploy Llama70b LLM Model
      block:
        - name: Delete Ingress resource Llama70b from default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-llama-70b-ingress
            state: absent
        - name: Delete Ingress resource Llama70b from auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-llama-70b-ingress
            state: absent
        - name: Deploy LLM model Llama70b
          ansible.builtin.command: >-
            helm upgrade --install vllm-llama-70b "{{ remote_helm_charts_base }}/vllm"
            --set LLM_MODEL_ID="meta-llama/Meta-Llama-3.1-70B-Instruct"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}            
            --set tensor_parallel_size=4
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if gaudi_deployment %}
              --values {{ gaudi_values_file }}
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}
            --force   
          register: helm_upgrade_install_model_deployment
          failed_when: helm_upgrade_install_model_deployment.rc != 0
      when:
        - '"llama-70b" in model_name_list'
        - install_true == 'true'


    - name: Check if vllm-llama-70b Helm release is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-llama-70b --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall llama-70b Helm release
      ansible.builtin.command:
        cmd: "helm uninstall vllm-llama-70b"
      when:
        - "'llama-70b' in model_name_list"
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""


    - name: Deploy Mixtral7b LLM Model
      block:
        - name: Delete Ingress resource Mixtral7b from default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-mixtral-7b-ingress
            state: absent
        - name: Delete Ingress resource Mixtral7b from auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-mixtral-7b-ingress
            state: absent
        - name: Deploy LLM model Mixtral7b
          ansible.builtin.command: >-
            helm upgrade --install vllm-mixtral-7b "{{ remote_helm_charts_base }}/vllm"
            --set LLM_MODEL_ID="mistralai/Mixtral-8x7B-Instruct-v0.1"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}            
            --set tensor_parallel_size={{ tensor_parallel_size_vllm }}
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if gaudi_deployment %}
              --values {{ gaudi_values_file }}
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}
            --force   
          register: helm_upgrade_install_model_deployment
          failed_when: helm_upgrade_install_model_deployment.rc != 0
      when:
        - '"mixtral-8x-7b" in model_name_list'
        - install_true == 'true'


    - name: Check if Mixtral7b Helm release is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-mixtral-7b --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall mixtral-8x-7b Helm release
      ansible.builtin.command:
        cmd: "helm uninstall vllm-mixtral-7b"
      when:
        - "'mixtral-8x-7b' in model_name_list"
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""


    - name: Deploy codellama LLM Model
      block:
        - name: Delete Ingress resource Codellama from default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-codellama-ingress
            state: absent
        - name: Delete Ingress resource Codellama from auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-codellama-ingress
            state: absent
        - name: Deploy LLM model codellama
          ansible.builtin.command: >-
            helm upgrade --install vllm-codellama "{{ remote_helm_charts_base }}/vllm"
            --set LLM_MODEL_ID="codellama/CodeLlama-34b-Instruct-hf"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}            
            --set tensor_parallel_size={{ tensor_parallel_size_vllm }}
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if gaudi_deployment %}
              --values {{ gaudi_values_file }}
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}
            --force   
          register: helm_upgrade_install_model_deployment
          failed_when: helm_upgrade_install_model_deployment.rc != 0
      when:
        - '"codellama-34b" in model_name_list'
        - install_true == 'true'
    - name: Check if codellama-34b Helm release is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-codellama --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall codellama-34b Helm release
      ansible.builtin.command:
        cmd: "helm uninstall vllm-codellama"
      when:
        - "'codellama-34b' in model_name_list"
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""


    - name: Deploy Faclon3 7b LLM Model
      block:
        - name: Delete Ingress resource Falcon3 7b from default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-falcon3-7b-ingress
            state: absent
        - name: Delete Ingress resource Falcon3 7b from auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-falcon3-7b-ingress
            state: absent
        - name: Deploy LLM model codellama
          ansible.builtin.command: >-
            helm upgrade --install vllm-falcon3-7b "{{ remote_helm_charts_base }}/vllm"
            --set LLM_MODEL_ID="tiiuae/Falcon3-7B-Instruct"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}            
            --set tensor_parallel_size={{ tensor_parallel_size_vllm }}
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if gaudi_deployment %}
              --values {{ gaudi_values_file }}
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}
            --force   
          register: helm_upgrade_install_model_deployment
          failed_when: helm_upgrade_install_model_deployment.rc != 0
      when:
        - '"falcon3-7b" in model_name_list'
        - install_true == 'true'
    - name: Check if Faclon3 7b Helm release is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-falcon3-7b --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall Faclon3 7b Helm release
      ansible.builtin.command:
        cmd: "helm uninstall vllm-falcon3-7b"
      when:
        - "'falcon3-7b' in model_name_list"
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""


    - name: Deploy Mistral_7b LLM Model
      block:
        - name: Delete Ingress resource Mistral 7b from default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-mistral-7b-ingress
            state: absent
        - name: Delete Ingress resource Mistral 7b from auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-mistral-7b-ingress
            state: absent
        - name: Deploy LLM model Mistral_7b
          ansible.builtin.command: >-
            helm upgrade --install vllm-mistral-7b "{{ remote_helm_charts_base }}/vllm"
            --set LLM_MODEL_ID="mistralai/Mistral-7B-Instruct-v0.3"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}            
            --set tensor_parallel_size={{ tensor_parallel_size_vllm }}
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if gaudi_deployment %}
              --values {{ gaudi_values_file }}
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}
            --force   
          register: helm_upgrade_install_model_deployment
          failed_when: helm_upgrade_install_model_deployment.rc != 0
      when:
        - '"mistral-7b" in model_name_list'
        - install_true == 'true'
    - name: Check if Mistral_7b Helm release is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-mistral-7b --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall Mistral_7b Helm release
      ansible.builtin.command:
        cmd: "helm uninstall vllm-mistral-7b"
      when:
        - "'mistral-7b' in model_name_list"
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""


    - name: Deploy tei LLM Model
      block:
        - name: Delete existing Ingress resource tei in auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-tei-ingress
            state: absent
        - name: Delete existing Ingress resource tei in default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-tei-ingress
            state: absent                
        - name: Deploy LLM model tei
          ansible.builtin.command: >-
            helm upgrade --install vllm-tei "{{ remote_helm_charts_base }}/tei"
            --set EMBEDDING_MODEL_ID="BAAI/bge-base-en-v1.5"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}            
            --set tensor_parallel_size={{ tensor_parallel_size_vllm }}
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if gaudi_deployment %}
              --values "{{ remote_helm_charts_base }}/tei/gaudi-values.yaml"
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}
            --set teirerank.namespace=default            
            --force   
          register: helm_upgrade_install_model_deployment
          failed_when: helm_upgrade_install_model_deployment.rc != 0
      when:
        - "'tei' in model_name_list"
        - install_true == 'true'
    - name: Check if tei Helm release is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-tei --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall tei Helm release
      ansible.builtin.command:
        cmd: "helm uninstall vllm-tei"
      when:        
        - "'tei' in model_name_list"
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""
   
    - name: Deploy teirerank LLM Model
      block:
        - name: Delete Ingress resource Teirerank from default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-teirerank-ingress
            state: absent
        - name: Delete Ingress resource Teirerank from auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-teirerank-ingress
            state: absent
        - name: Deploy LLM model teirerank
          ansible.builtin.command: >-
            helm upgrade --install vllm-teirerank "{{ remote_helm_charts_base }}/teirerank"
            --set RERANK_MODEL_ID="BAAI/bge-reranker-base"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}            
            --set tensor_parallel_size={{ tensor_parallel_size_vllm }}
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if gaudi_deployment %}
              --values "{{ remote_helm_charts_base }}/teirerank/gaudi-values.yaml"
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}
            --set teirerank.namespace=default
            --force   
          register: helm_upgrade_install_model_deployment
          failed_when: helm_upgrade_install_model_deployment.rc != 0
      when:
        - "'rerank' in model_name_list"        
        - install_true == 'true'
    - name: Check if teirerank Helm release is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-teirerank --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall teirerank Helm release
      ansible.builtin.command:
        cmd: "helm uninstall vllm-teirerank"
      when:        
        - "'rerank' in model_name_list"   
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""

    - name: Check if CPU Model is installed
      ansible.builtin.command:
        cmd: "helm list --filter vllm-llama8b-cpu --short"
      register: helm_release_installed
      ignore_errors: true
    - name: Uninstall CPU  Model
      ansible.builtin.command:
        cmd: "helm uninstall vllm-llama8b-cpu"
      when:
        - "'cpu-llama' in model_name_list"
        - uninstall_true == 'true'
        - helm_release_installed.stdout != ""        
    
    - name: Deploy CPU based LLM model  llama 8b
      block:        
        - name: Delete Ingress resource Llama8b from default namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: default
            name: vllm-llama8b-cpu-ingress
            state: absent
        - name: Delete Ingress resource Llama8b from auth-apisix namespace
          kubernetes.core.k8s:
            kind: Ingress
            namespace: auth-apisix
            name: vllm-llama8b-cpu-ingress
            state: absent
        - name: Deploy CPU based LLM model  llama 8b Installation
          ansible.builtin.command: >-
            helm upgrade --install vllm-llama8b-cpu "{{ remote_helm_charts_base }}/vllm"
            --set LLM_MODEL_ID="meta-llama/Meta-Llama-3.1-8B-Instruct"
            --set global.HUGGINGFACEHUB_API_TOKEN={{ hugging_face_token }}                        
            {% if apisix_enabled %}
              --set apisix.enabled={{ apisix_enabled }}
            {% endif %}
            {% if ingress_enabled %}
              --set ingress.enabled={{ ingress_enabled }}
              --set ingress.host={{ secret_name }}
              --set ingress.secretname={{ secret_name }}
            {% endif %}
            {% if deploy_keycloak == 'yes' and apisix_enabled %}
              --set oidc.client_id={{ keycloak_client_id | default('') }}
              --set oidc.client_secret={{ client_secret | default('') }}
            {% endif %}            
            --force                                                
          register: helm_upgrade_install_model_deployment_cpu_llama8b
          failed_when: helm_upgrade_install_model_deployment_cpu_llama8b.rc != 0
      when:
        - cpu_playbook == 'true'
        - install_true == 'true'                      

    - name: Print model_name_list 
      debug:
        var: model_name_list
    
    - name: Print model_name_list before uninstall
      debug:
        var: uninstall_true
    
    - name: Print model_name_list before uninstall
      debug:
        var: install_true

    - name: Print model_name_list before uninstall
      debug:
        var: cpu_playbook

    - name: List the Installed Inference Models
      ansible.builtin.shell:
        cmd: "helm list --short | grep 'vllm-'"
      register: inference_models
      when: list_model_true == 'true'
    - name: Print Installed Models in Comma Separated Format
      ansible.builtin.debug:
        msg: "Installed Models: {{ inference_models.stdout_lines | join(', ') }}"
      when: inference_models.stdout_lines is defined and inference_models.stdout_lines | length > 0
    
    - name: Cleanup Helm chart files from master nodes
      ansible.builtin.file:
        path: "{{ remote_helm_charts_base }}"
        state: absent
    
    
    
    
    




