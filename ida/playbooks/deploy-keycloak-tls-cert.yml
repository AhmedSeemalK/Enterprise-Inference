---
- name: Create Keycloak TLS secret
  hosts: kube_control_plane
  vars:
    ansible_python_interpreter: /usr/bin/python3
    helm_charts_base: "{{ lookup('env', 'PWD') }}/helm-charts"
    remote_helm_charts_base: "/tmp/helm-charts"
    ingress_file: "all_models_apisix_ingres_nginx.yaml"
    keycloak_url: "https://{{ secret_name }}"
  gather_facts: false
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  environment: "{{ proxy_disable_env | default({}) }}"
  tasks:
    - name: Ensure pip is installed
      ansible.builtin.package:
        name: python3-pip
        state: present
      become: true
    - name: Install kubernetes library using pip
      ansible.builtin.pip:
        name: kubernetes
        state: present
        executable: /usr/bin/pip3
      become: true
    - name: Ensure jq is installed
      ansible.builtin.package:
        name: jq
        state: present
      become: true
    - name: Create auth-apisix namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: auth-apisix      
    - name: Print the values of multiple variables
      debug:
        var: cert_file, key_file, secret_name

    - name: Create a Keycloak secret for TLS using the k8s module
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
            namespace: default  # Change this to the desired namespace if not default
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ lookup('file', cert_file) | b64encode }}"
            tls.key: "{{ lookup('file', key_file) | b64encode }}"
      register: kubectl_output
    - name: Create a Keycloak secret in Apisix-auth namespace
      community.kubernetes.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
            namespace: auth-apisix  # Change this to the desired namespace if not default
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ lookup('file', cert_file) | b64encode }}"
            tls.key: "{{ lookup('file', key_file) | b64encode }}"
      register: kubectl_output    
    - name: Display the output
      debug:
        msg: "Secret {{ secret_name }} created."
    - name: Install Helm
      ansible.builtin.shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        executable: /bin/bash
      become: true
    - name: Print the values of multiple variables
      debug:
        var: keycloak_admin_user, keycloak_admin_password
    
    - name: Upgrade Keycloak using Helm
      community.kubernetes.helm:
        name: keycloak
        chart_ref: oci://registry-1.docker.io/bitnamicharts/keycloak
        release_namespace: default  # Set the namespace where Keycloak will be installed
        create_namespace: true
        chart_version: "22.1.0"
        values:
          auth:
            adminUser: "{{ keycloak_admin_user }}"
            adminPassword: "{{ keycloak_admin_password }}"
          ingress:
            enabled: true
            hostname: "{{ secret_name }}"
            tls: true
            ingressClassName: "nginx"
            proxyAddressForwarding: true
            annotations:
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
              nginx.ingress.kubernetes.io/proxy-body-size: "10m"

            extraTls:
              - hosts:
                  - "{{ secret_name }}"
                secretName: "{{ secret_name }}"
        state: present
      register: helm_output
    - name: Display Helm output
      debug:
        msg: "{{ helm_output }}"
    - name: Check Keycloak StatefulSet is ready
      community.kubernetes.k8s_info:
        kind: StatefulSet
        namespace: default
        name: keycloak
      register: keycloak_statefulset
      until: >
        keycloak_statefulset.resources[0].status.readyReplicas is defined and
        keycloak_statefulset.resources[0].status.readyReplicas == keycloak_statefulset.resources[0].spec.replicas
      retries: 60
      delay: 10
      changed_when: false
    - name: Wait for Keycloak pods to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: keycloak
        label_selectors:
          - app=keycloak
      register: keycloak_pods
      until:
        - keycloak_pods.resources | map('select', 'status.phase') | select('equalto', 'Running') | list | length == keycloak_pods.resources | length
        - keycloak_pods.resources | map('select', 'status.containerStatuses') | sum(attribute='ready', start=0) == keycloak_pods.resources | length
      retries: 60
      delay: 5
    
  
    - name: Wait for a short delay to allow pods to terminate
      pause:
        seconds: 10
    - name: Get the expected number of replicas for the ingress-nginx deployment
      community.kubernetes.k8s_info:
        kind: Deployment
        namespace: ingress-nginx
        name: ingress-nginx-controller
      register: ingress_nginx_deployment
    - name: Wait for new ingress-nginx pods to be running and ready
      community.kubernetes.k8s_info:
        kind: Pod
        namespace: ingress-nginx
        label_selectors:
          - "app.kubernetes.io/name=ingress-nginx"
      register: new_pods
      until: >-
        new_pods.resources | json_query('[?status.phase == `Running`].status.containerStatuses[].ready') | length ==
        ingress_nginx_deployment.resources[0].status.replicas
      retries: 60
      delay: 10
      changed_when: false


    - name: Copy Helm chart files to node
      ansible.builtin.copy:
        src: "{{ helm_charts_base }}/"
        dest: "{{ remote_helm_charts_base }}/"
        mode: '0755'
        owner: ubuntu
        group: ubuntu
        remote_src: no
    
    - name: Ensure the script is executable
      file:
        path: "{{ remote_helm_charts_base }}/keycloak-realmcreation.sh"
        mode: '0755'
        owner: ubuntu
        group: ubuntu
                        
    - name: Update Helm dependencies for auth-apisix on nodes
      ansible.builtin.command: helm dependency update "{{ remote_helm_charts_base }}/apisix-helm/"
      register: helm_dependency_update
      failed_when: helm_dependency_update.rc != 0
    

      
    - name: Update Helm dependencies for auth-apisix on nodes
      community.kubernetes.helm:
        name: auth-apisix
        chart_ref: "{{ remote_helm_charts_base }}/apisix-helm/"
        update_repo_cache: yes
        release_namespace: auth-apisix
    - name: Install auth-apisix Helm chart on nodes
      community.kubernetes.helm:
        name: auth-apisix
        chart_ref: "{{ remote_helm_charts_base }}/apisix-helm/"
        create_namespace: yes
        release_namespace: auth-apisix
    
    - name: Print model_name_list
      debug:
        var: model_name_list
    - name: Upgrade or install keycloak-apisix
      command: >
        helm upgrade --install keycloak-apisix "{{ remote_helm_charts_base }}/keycloak"
        --namespace default
        --set keycloakTokenRoute.host={{ secret_name }}
        --set keycloakTokenRoute.path=/token
        --set keycloakTokenRoute.serviceName=keycloak
        --set keycloakTokenRoute.servicePort=80
        --set keycloakTokenRoute.rewritePath=/realms/master/protocol/openid-connect/token
        --set tls.host={{ secret_name }}
        --set tls.secretName={{ secret_name }}
        --set tls.secretNamespace=default
        --set ingress.host={{ secret_name }}
        --set ingress.serviceName=auth-apisix-gateway
        --set ingress.servicePort=80
        --set ingress.secretName={{ secret_name }}
      environment:
        secret_name: "{{ secret_name }}"
      register: keycloak_ingress_register_msg_in
      failed_when: keycloak_ingress_register_msg_in.rc != 0
                  
    - name: Execute the Keycloak Realm Creation Script
      command: "{{ remote_helm_charts_base }}/keycloak-realmcreation.sh {{ secret_name }} {{ keycloak_admin_user }} {{ keycloak_admin_password }} {{ keycloak_client_id }}"
      register: script_output
    - name: Set client_secret fact
      set_fact:
        client_secret: "{{ script_output.stdout | regex_search('Client secret: (.*)') | join('') | regex_replace('^Client secret: ') }}"
      when: script_output.stdout is search('Client secret:')
    - debug:
        msg: "The client secret is: {{ client_secret }}"

    - name: Print the script output
      debug:
        msg: "{{ script_output.stdout }}"    
    
    - name: Cleanup Helm chart files from master nodes
      ansible.builtin.file:
        path: "{{ remote_helm_charts_base }}"
        state: absent
    